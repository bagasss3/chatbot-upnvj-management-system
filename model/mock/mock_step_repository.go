// Code generated by MockGen. DO NOT EDIT.
// Source: cbupnvj/model (interfaces: StepRepository)

// Package mock is a generated GoMock package.
package mock

import (
	model "cbupnvj/model"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockStepRepository is a mock of StepRepository interface.
type MockStepRepository struct {
	ctrl     *gomock.Controller
	recorder *MockStepRepositoryMockRecorder
}

// MockStepRepositoryMockRecorder is the mock recorder for MockStepRepository.
type MockStepRepositoryMockRecorder struct {
	mock *MockStepRepository
}

// NewMockStepRepository creates a new mock instance.
func NewMockStepRepository(ctrl *gomock.Controller) *MockStepRepository {
	mock := &MockStepRepository{ctrl: ctrl}
	mock.recorder = &MockStepRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStepRepository) EXPECT() *MockStepRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockStepRepository) Create(arg0 context.Context, arg1 *gorm.DB, arg2 *model.Step) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockStepRepositoryMockRecorder) Create(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockStepRepository)(nil).Create), arg0, arg1, arg2)
}

// Delete mocks base method.
func (m *MockStepRepository) Delete(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockStepRepositoryMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockStepRepository)(nil).Delete), arg0, arg1)
}

// DeleteAllByStoryID mocks base method.
func (m *MockStepRepository) DeleteAllByStoryID(arg0 context.Context, arg1 *gorm.DB, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllByStoryID", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllByStoryID indicates an expected call of DeleteAllByStoryID.
func (mr *MockStepRepositoryMockRecorder) DeleteAllByStoryID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllByStoryID", reflect.TypeOf((*MockStepRepository)(nil).DeleteAllByStoryID), arg0, arg1, arg2)
}

// FindAll mocks base method.
func (m *MockStepRepository) FindAll(arg0 context.Context, arg1 string) ([]*model.Step, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", arg0, arg1)
	ret0, _ := ret[0].([]*model.Step)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockStepRepositoryMockRecorder) FindAll(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockStepRepository)(nil).FindAll), arg0, arg1)
}

// FindByID mocks base method.
func (m *MockStepRepository) FindByID(arg0 context.Context, arg1, arg2 string) (*model.Step, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", arg0, arg1, arg2)
	ret0, _ := ret[0].(*model.Step)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockStepRepositoryMockRecorder) FindByID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockStepRepository)(nil).FindByID), arg0, arg1, arg2)
}

// Update mocks base method.
func (m *MockStepRepository) Update(arg0 context.Context, arg1 string, arg2 *model.Step) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockStepRepositoryMockRecorder) Update(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockStepRepository)(nil).Update), arg0, arg1, arg2)
}
