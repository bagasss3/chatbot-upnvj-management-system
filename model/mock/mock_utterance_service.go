// Code generated by MockGen. DO NOT EDIT.
// Source: cbupnvj/model (interfaces: UtteranceService)

// Package mock is a generated GoMock package.
package mock

import (
	model "cbupnvj/model"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUtteranceService is a mock of UtteranceService interface.
type MockUtteranceService struct {
	ctrl     *gomock.Controller
	recorder *MockUtteranceServiceMockRecorder
}

// MockUtteranceServiceMockRecorder is the mock recorder for MockUtteranceService.
type MockUtteranceServiceMockRecorder struct {
	mock *MockUtteranceService
}

// NewMockUtteranceService creates a new mock instance.
func NewMockUtteranceService(ctrl *gomock.Controller) *MockUtteranceService {
	mock := &MockUtteranceService{ctrl: ctrl}
	mock.recorder = &MockUtteranceServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUtteranceService) EXPECT() *MockUtteranceServiceMockRecorder {
	return m.recorder
}

// CreateUtterance mocks base method.
func (m *MockUtteranceService) CreateUtterance(arg0 context.Context, arg1 model.CreateUpdateUtteranceRequest) (*model.Utterance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUtterance", arg0, arg1)
	ret0, _ := ret[0].(*model.Utterance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUtterance indicates an expected call of CreateUtterance.
func (mr *MockUtteranceServiceMockRecorder) CreateUtterance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUtterance", reflect.TypeOf((*MockUtteranceService)(nil).CreateUtterance), arg0, arg1)
}

// DeleteUtterance mocks base method.
func (m *MockUtteranceService) DeleteUtterance(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUtterance", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUtterance indicates an expected call of DeleteUtterance.
func (mr *MockUtteranceServiceMockRecorder) DeleteUtterance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUtterance", reflect.TypeOf((*MockUtteranceService)(nil).DeleteUtterance), arg0, arg1)
}

// FindAllUtterance mocks base method.
func (m *MockUtteranceService) FindAllUtterance(arg0 context.Context, arg1 string) ([]*model.Utterance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllUtterance", arg0, arg1)
	ret0, _ := ret[0].([]*model.Utterance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllUtterance indicates an expected call of FindAllUtterance.
func (mr *MockUtteranceServiceMockRecorder) FindAllUtterance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllUtterance", reflect.TypeOf((*MockUtteranceService)(nil).FindAllUtterance), arg0, arg1)
}

// FindUtteranceByID mocks base method.
func (m *MockUtteranceService) FindUtteranceByID(arg0 context.Context, arg1 string) (*model.Utterance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUtteranceByID", arg0, arg1)
	ret0, _ := ret[0].(*model.Utterance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUtteranceByID indicates an expected call of FindUtteranceByID.
func (mr *MockUtteranceServiceMockRecorder) FindUtteranceByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUtteranceByID", reflect.TypeOf((*MockUtteranceService)(nil).FindUtteranceByID), arg0, arg1)
}

// UpdateUtterance mocks base method.
func (m *MockUtteranceService) UpdateUtterance(arg0 context.Context, arg1 string, arg2 model.CreateUpdateUtteranceRequest) (*model.Utterance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUtterance", arg0, arg1, arg2)
	ret0, _ := ret[0].(*model.Utterance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUtterance indicates an expected call of UpdateUtterance.
func (mr *MockUtteranceServiceMockRecorder) UpdateUtterance(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUtterance", reflect.TypeOf((*MockUtteranceService)(nil).UpdateUtterance), arg0, arg1, arg2)
}
