// Code generated by MockGen. DO NOT EDIT.
// Source: cbupnvj/model (interfaces: ConversationService)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockConversationService is a mock of ConversationService interface.
type MockConversationService struct {
	ctrl     *gomock.Controller
	recorder *MockConversationServiceMockRecorder
}

// MockConversationServiceMockRecorder is the mock recorder for MockConversationService.
type MockConversationServiceMockRecorder struct {
	mock *MockConversationService
}

// NewMockConversationService creates a new mock instance.
func NewMockConversationService(ctrl *gomock.Controller) *MockConversationService {
	mock := &MockConversationService{ctrl: ctrl}
	mock.recorder = &MockConversationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConversationService) EXPECT() *MockConversationServiceMockRecorder {
	return m.recorder
}

// CountAllConversation mocks base method.
func (m *MockConversationService) CountAllConversation(arg0 context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountAllConversation", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountAllConversation indicates an expected call of CountAllConversation.
func (mr *MockConversationServiceMockRecorder) CountAllConversation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountAllConversation", reflect.TypeOf((*MockConversationService)(nil).CountAllConversation), arg0)
}
