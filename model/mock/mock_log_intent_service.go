// Code generated by MockGen. DO NOT EDIT.
// Source: cbupnvj/model (interfaces: LogIntentService)

// Package mock is a generated GoMock package.
package mock

import (
	model "cbupnvj/model"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockLogIntentService is a mock of LogIntentService interface.
type MockLogIntentService struct {
	ctrl     *gomock.Controller
	recorder *MockLogIntentServiceMockRecorder
}

// MockLogIntentServiceMockRecorder is the mock recorder for MockLogIntentService.
type MockLogIntentServiceMockRecorder struct {
	mock *MockLogIntentService
}

// NewMockLogIntentService creates a new mock instance.
func NewMockLogIntentService(ctrl *gomock.Controller) *MockLogIntentService {
	mock := &MockLogIntentService{ctrl: ctrl}
	mock.recorder = &MockLogIntentServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogIntentService) EXPECT() *MockLogIntentServiceMockRecorder {
	return m.recorder
}

// CreateOrUpdateLogIntent mocks base method.
func (m *MockLogIntentService) CreateOrUpdateLogIntent(arg0 context.Context, arg1 model.CreateUpdateLogIntentRequest) (*model.LogIntent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdateLogIntent", arg0, arg1)
	ret0, _ := ret[0].(*model.LogIntent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdateLogIntent indicates an expected call of CreateOrUpdateLogIntent.
func (mr *MockLogIntentServiceMockRecorder) CreateOrUpdateLogIntent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateLogIntent", reflect.TypeOf((*MockLogIntentService)(nil).CreateOrUpdateLogIntent), arg0, arg1)
}

// FindAllLogIntent mocks base method.
func (m *MockLogIntentService) FindAllLogIntent(arg0 context.Context) ([]*model.LogIntent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllLogIntent", arg0)
	ret0, _ := ret[0].([]*model.LogIntent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllLogIntent indicates an expected call of FindAllLogIntent.
func (mr *MockLogIntentServiceMockRecorder) FindAllLogIntent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllLogIntent", reflect.TypeOf((*MockLogIntentService)(nil).FindAllLogIntent), arg0)
}

// FindLogIntentByIntentID mocks base method.
func (m *MockLogIntentService) FindLogIntentByIntentID(arg0 context.Context, arg1 string) (*model.LogIntent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindLogIntentByIntentID", arg0, arg1)
	ret0, _ := ret[0].(*model.LogIntent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindLogIntentByIntentID indicates an expected call of FindLogIntentByIntentID.
func (mr *MockLogIntentServiceMockRecorder) FindLogIntentByIntentID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindLogIntentByIntentID", reflect.TypeOf((*MockLogIntentService)(nil).FindLogIntentByIntentID), arg0, arg1)
}
