// Code generated by MockGen. DO NOT EDIT.
// Source: cbupnvj/model (interfaces: LogIntentRepository)

// Package mock is a generated GoMock package.
package mock

import (
	model "cbupnvj/model"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockLogIntentRepository is a mock of LogIntentRepository interface.
type MockLogIntentRepository struct {
	ctrl     *gomock.Controller
	recorder *MockLogIntentRepositoryMockRecorder
}

// MockLogIntentRepositoryMockRecorder is the mock recorder for MockLogIntentRepository.
type MockLogIntentRepositoryMockRecorder struct {
	mock *MockLogIntentRepository
}

// NewMockLogIntentRepository creates a new mock instance.
func NewMockLogIntentRepository(ctrl *gomock.Controller) *MockLogIntentRepository {
	mock := &MockLogIntentRepository{ctrl: ctrl}
	mock.recorder = &MockLogIntentRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogIntentRepository) EXPECT() *MockLogIntentRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockLogIntentRepository) Create(arg0 context.Context, arg1 *model.LogIntent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockLogIntentRepositoryMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockLogIntentRepository)(nil).Create), arg0, arg1)
}

// DeleteByIntentIDWithTx mocks base method.
func (m *MockLogIntentRepository) DeleteByIntentIDWithTx(arg0 context.Context, arg1 string, arg2 *gorm.DB) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByIntentIDWithTx", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByIntentIDWithTx indicates an expected call of DeleteByIntentIDWithTx.
func (mr *MockLogIntentRepositoryMockRecorder) DeleteByIntentIDWithTx(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByIntentIDWithTx", reflect.TypeOf((*MockLogIntentRepository)(nil).DeleteByIntentIDWithTx), arg0, arg1, arg2)
}

// FindAll mocks base method.
func (m *MockLogIntentRepository) FindAll(arg0 context.Context) ([]*model.LogIntent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", arg0)
	ret0, _ := ret[0].([]*model.LogIntent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockLogIntentRepositoryMockRecorder) FindAll(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockLogIntentRepository)(nil).FindAll), arg0)
}

// FindByIntentID mocks base method.
func (m *MockLogIntentRepository) FindByIntentID(arg0 context.Context, arg1 string) (*model.LogIntent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByIntentID", arg0, arg1)
	ret0, _ := ret[0].(*model.LogIntent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByIntentID indicates an expected call of FindByIntentID.
func (mr *MockLogIntentRepositoryMockRecorder) FindByIntentID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByIntentID", reflect.TypeOf((*MockLogIntentRepository)(nil).FindByIntentID), arg0, arg1)
}

// Update mocks base method.
func (m *MockLogIntentRepository) Update(arg0 context.Context, arg1 string, arg2 *model.LogIntent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockLogIntentRepositoryMockRecorder) Update(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockLogIntentRepository)(nil).Update), arg0, arg1, arg2)
}
