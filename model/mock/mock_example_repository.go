// Code generated by MockGen. DO NOT EDIT.
// Source: cbupnvj/model (interfaces: ExampleRepository)

// Package mock is a generated GoMock package.
package mock

import (
	model "cbupnvj/model"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockExampleRepository is a mock of ExampleRepository interface.
type MockExampleRepository struct {
	ctrl     *gomock.Controller
	recorder *MockExampleRepositoryMockRecorder
}

// MockExampleRepositoryMockRecorder is the mock recorder for MockExampleRepository.
type MockExampleRepositoryMockRecorder struct {
	mock *MockExampleRepository
}

// NewMockExampleRepository creates a new mock instance.
func NewMockExampleRepository(ctrl *gomock.Controller) *MockExampleRepository {
	mock := &MockExampleRepository{ctrl: ctrl}
	mock.recorder = &MockExampleRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExampleRepository) EXPECT() *MockExampleRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockExampleRepository) Create(arg0 context.Context, arg1 *model.Example) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockExampleRepositoryMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockExampleRepository)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockExampleRepository) Delete(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockExampleRepositoryMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockExampleRepository)(nil).Delete), arg0, arg1)
}

// DeleteAllByIntentIDWithTx mocks base method.
func (m *MockExampleRepository) DeleteAllByIntentIDWithTx(arg0 context.Context, arg1 string, arg2 *gorm.DB) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllByIntentIDWithTx", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllByIntentIDWithTx indicates an expected call of DeleteAllByIntentIDWithTx.
func (mr *MockExampleRepositoryMockRecorder) DeleteAllByIntentIDWithTx(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllByIntentIDWithTx", reflect.TypeOf((*MockExampleRepository)(nil).DeleteAllByIntentIDWithTx), arg0, arg1, arg2)
}

// FindAllByIntentID mocks base method.
func (m *MockExampleRepository) FindAllByIntentID(arg0 context.Context, arg1 string) ([]*model.Example, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllByIntentID", arg0, arg1)
	ret0, _ := ret[0].([]*model.Example)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllByIntentID indicates an expected call of FindAllByIntentID.
func (mr *MockExampleRepositoryMockRecorder) FindAllByIntentID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllByIntentID", reflect.TypeOf((*MockExampleRepository)(nil).FindAllByIntentID), arg0, arg1)
}

// FindByID mocks base method.
func (m *MockExampleRepository) FindByID(arg0 context.Context, arg1, arg2 string) (*model.Example, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", arg0, arg1, arg2)
	ret0, _ := ret[0].(*model.Example)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockExampleRepositoryMockRecorder) FindByID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockExampleRepository)(nil).FindByID), arg0, arg1, arg2)
}

// Update mocks base method.
func (m *MockExampleRepository) Update(arg0 context.Context, arg1 string, arg2 *model.Example) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockExampleRepositoryMockRecorder) Update(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockExampleRepository)(nil).Update), arg0, arg1, arg2)
}
