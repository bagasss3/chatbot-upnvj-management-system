// Code generated by MockGen. DO NOT EDIT.
// Source: cbupnvj/model (interfaces: StepService)

// Package mock is a generated GoMock package.
package mock

import (
	model "cbupnvj/model"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockStepService is a mock of StepService interface.
type MockStepService struct {
	ctrl     *gomock.Controller
	recorder *MockStepServiceMockRecorder
}

// MockStepServiceMockRecorder is the mock recorder for MockStepService.
type MockStepServiceMockRecorder struct {
	mock *MockStepService
}

// NewMockStepService creates a new mock instance.
func NewMockStepService(ctrl *gomock.Controller) *MockStepService {
	mock := &MockStepService{ctrl: ctrl}
	mock.recorder = &MockStepServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStepService) EXPECT() *MockStepServiceMockRecorder {
	return m.recorder
}

// CreateStep mocks base method.
func (m *MockStepService) CreateStep(arg0 context.Context, arg1 model.CreateStepArrayRequest) ([]*model.Step, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStep", arg0, arg1)
	ret0, _ := ret[0].([]*model.Step)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStep indicates an expected call of CreateStep.
func (mr *MockStepServiceMockRecorder) CreateStep(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStep", reflect.TypeOf((*MockStepService)(nil).CreateStep), arg0, arg1)
}

// DeleteStep mocks base method.
func (m *MockStepService) DeleteStep(arg0 context.Context, arg1, arg2 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStep", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteStep indicates an expected call of DeleteStep.
func (mr *MockStepServiceMockRecorder) DeleteStep(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStep", reflect.TypeOf((*MockStepService)(nil).DeleteStep), arg0, arg1, arg2)
}

// FindAllStepByStoryID mocks base method.
func (m *MockStepService) FindAllStepByStoryID(arg0 context.Context, arg1 string) ([]*model.Step, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllStepByStoryID", arg0, arg1)
	ret0, _ := ret[0].([]*model.Step)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllStepByStoryID indicates an expected call of FindAllStepByStoryID.
func (mr *MockStepServiceMockRecorder) FindAllStepByStoryID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllStepByStoryID", reflect.TypeOf((*MockStepService)(nil).FindAllStepByStoryID), arg0, arg1)
}

// FindStepByID mocks base method.
func (m *MockStepService) FindStepByID(arg0 context.Context, arg1, arg2 string) (*model.Step, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindStepByID", arg0, arg1, arg2)
	ret0, _ := ret[0].(*model.Step)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindStepByID indicates an expected call of FindStepByID.
func (mr *MockStepServiceMockRecorder) FindStepByID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindStepByID", reflect.TypeOf((*MockStepService)(nil).FindStepByID), arg0, arg1, arg2)
}

// UpdateStep mocks base method.
func (m *MockStepService) UpdateStep(arg0 context.Context, arg1, arg2 string, arg3 model.UpdateStepRequest) (*model.Step, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStep", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*model.Step)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStep indicates an expected call of UpdateStep.
func (mr *MockStepServiceMockRecorder) UpdateStep(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStep", reflect.TypeOf((*MockStepService)(nil).UpdateStep), arg0, arg1, arg2, arg3)
}
