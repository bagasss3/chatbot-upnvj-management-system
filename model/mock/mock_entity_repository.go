// Code generated by MockGen. DO NOT EDIT.
// Source: cbupnvj/model (interfaces: EntityRepository)

// Package mock is a generated GoMock package.
package mock

import (
	model "cbupnvj/model"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockEntityRepository is a mock of EntityRepository interface.
type MockEntityRepository struct {
	ctrl     *gomock.Controller
	recorder *MockEntityRepositoryMockRecorder
}

// MockEntityRepositoryMockRecorder is the mock recorder for MockEntityRepository.
type MockEntityRepositoryMockRecorder struct {
	mock *MockEntityRepository
}

// NewMockEntityRepository creates a new mock instance.
func NewMockEntityRepository(ctrl *gomock.Controller) *MockEntityRepository {
	mock := &MockEntityRepository{ctrl: ctrl}
	mock.recorder = &MockEntityRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEntityRepository) EXPECT() *MockEntityRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockEntityRepository) Create(arg0 context.Context, arg1 *model.Entity) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockEntityRepositoryMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockEntityRepository)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockEntityRepository) Delete(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockEntityRepositoryMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockEntityRepository)(nil).Delete), arg0, arg1)
}

// FindAll mocks base method.
func (m *MockEntityRepository) FindAll(arg0 context.Context, arg1 string) ([]*model.Entity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", arg0, arg1)
	ret0, _ := ret[0].([]*model.Entity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockEntityRepositoryMockRecorder) FindAll(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockEntityRepository)(nil).FindAll), arg0, arg1)
}

// FindAllWithNoIntentId mocks base method.
func (m *MockEntityRepository) FindAllWithNoIntentId(arg0 context.Context) ([]*model.Entity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllWithNoIntentId", arg0)
	ret0, _ := ret[0].([]*model.Entity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllWithNoIntentId indicates an expected call of FindAllWithNoIntentId.
func (mr *MockEntityRepositoryMockRecorder) FindAllWithNoIntentId(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllWithNoIntentId", reflect.TypeOf((*MockEntityRepository)(nil).FindAllWithNoIntentId), arg0)
}

// FindByID mocks base method.
func (m *MockEntityRepository) FindByID(arg0 context.Context, arg1 string) (*model.Entity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", arg0, arg1)
	ret0, _ := ret[0].(*model.Entity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockEntityRepositoryMockRecorder) FindByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockEntityRepository)(nil).FindByID), arg0, arg1)
}
