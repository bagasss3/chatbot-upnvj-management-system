// Code generated by MockGen. DO NOT EDIT.
// Source: cbupnvj/model (interfaces: FallbackChatLogRepository)

// Package mock is a generated GoMock package.
package mock

import (
	model "cbupnvj/model"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockFallbackChatLogRepository is a mock of FallbackChatLogRepository interface.
type MockFallbackChatLogRepository struct {
	ctrl     *gomock.Controller
	recorder *MockFallbackChatLogRepositoryMockRecorder
}

// MockFallbackChatLogRepositoryMockRecorder is the mock recorder for MockFallbackChatLogRepository.
type MockFallbackChatLogRepositoryMockRecorder struct {
	mock *MockFallbackChatLogRepository
}

// NewMockFallbackChatLogRepository creates a new mock instance.
func NewMockFallbackChatLogRepository(ctrl *gomock.Controller) *MockFallbackChatLogRepository {
	mock := &MockFallbackChatLogRepository{ctrl: ctrl}
	mock.recorder = &MockFallbackChatLogRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFallbackChatLogRepository) EXPECT() *MockFallbackChatLogRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockFallbackChatLogRepository) Create(arg0 context.Context, arg1 *model.FallbackChatLog) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockFallbackChatLogRepositoryMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockFallbackChatLogRepository)(nil).Create), arg0, arg1)
}

// FindAll mocks base method.
func (m *MockFallbackChatLogRepository) FindAll(arg0 context.Context, arg1 string) ([]*model.FallbackChatLog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", arg0, arg1)
	ret0, _ := ret[0].([]*model.FallbackChatLog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockFallbackChatLogRepositoryMockRecorder) FindAll(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockFallbackChatLogRepository)(nil).FindAll), arg0, arg1)
}

// FindAllGroupCluster mocks base method.
func (m *MockFallbackChatLogRepository) FindAllGroupCluster(arg0 context.Context) ([]*model.ClusterData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllGroupCluster", arg0)
	ret0, _ := ret[0].([]*model.ClusterData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllGroupCluster indicates an expected call of FindAllGroupCluster.
func (mr *MockFallbackChatLogRepositoryMockRecorder) FindAllGroupCluster(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllGroupCluster", reflect.TypeOf((*MockFallbackChatLogRepository)(nil).FindAllGroupCluster), arg0)
}

// FindNullAndCluster mocks base method.
func (m *MockFallbackChatLogRepository) FindNullAndCluster(arg0 context.Context) (*model.ResponseFallback, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindNullAndCluster", arg0)
	ret0, _ := ret[0].(*model.ResponseFallback)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindNullAndCluster indicates an expected call of FindNullAndCluster.
func (mr *MockFallbackChatLogRepositoryMockRecorder) FindNullAndCluster(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindNullAndCluster", reflect.TypeOf((*MockFallbackChatLogRepository)(nil).FindNullAndCluster), arg0)
}

// UpdateGroupCluster mocks base method.
func (m *MockFallbackChatLogRepository) UpdateGroupCluster(arg0 context.Context, arg1 *model.FallbackChatLog, arg2 *gorm.DB) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGroupCluster", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGroupCluster indicates an expected call of UpdateGroupCluster.
func (mr *MockFallbackChatLogRepositoryMockRecorder) UpdateGroupCluster(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGroupCluster", reflect.TypeOf((*MockFallbackChatLogRepository)(nil).UpdateGroupCluster), arg0, arg1, arg2)
}
