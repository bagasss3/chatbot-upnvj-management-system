// Code generated by MockGen. DO NOT EDIT.
// Source: cbupnvj/model (interfaces: EntityService)

// Package mock is a generated GoMock package.
package mock

import (
	model "cbupnvj/model"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockEntityService is a mock of EntityService interface.
type MockEntityService struct {
	ctrl     *gomock.Controller
	recorder *MockEntityServiceMockRecorder
}

// MockEntityServiceMockRecorder is the mock recorder for MockEntityService.
type MockEntityServiceMockRecorder struct {
	mock *MockEntityService
}

// NewMockEntityService creates a new mock instance.
func NewMockEntityService(ctrl *gomock.Controller) *MockEntityService {
	mock := &MockEntityService{ctrl: ctrl}
	mock.recorder = &MockEntityServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEntityService) EXPECT() *MockEntityServiceMockRecorder {
	return m.recorder
}

// CreateEntity mocks base method.
func (m *MockEntityService) CreateEntity(arg0 context.Context, arg1 model.CreateEntityRequest) (*model.Entity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEntity", arg0, arg1)
	ret0, _ := ret[0].(*model.Entity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEntity indicates an expected call of CreateEntity.
func (mr *MockEntityServiceMockRecorder) CreateEntity(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEntity", reflect.TypeOf((*MockEntityService)(nil).CreateEntity), arg0, arg1)
}

// DeleteEntity mocks base method.
func (m *MockEntityService) DeleteEntity(arg0 context.Context, arg1, arg2 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEntity", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEntity indicates an expected call of DeleteEntity.
func (mr *MockEntityServiceMockRecorder) DeleteEntity(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEntity", reflect.TypeOf((*MockEntityService)(nil).DeleteEntity), arg0, arg1, arg2)
}

// FindAllEntity mocks base method.
func (m *MockEntityService) FindAllEntity(arg0 context.Context, arg1 string) ([]*model.Entity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllEntity", arg0, arg1)
	ret0, _ := ret[0].([]*model.Entity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllEntity indicates an expected call of FindAllEntity.
func (mr *MockEntityServiceMockRecorder) FindAllEntity(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllEntity", reflect.TypeOf((*MockEntityService)(nil).FindAllEntity), arg0, arg1)
}

// FindEntityByID mocks base method.
func (m *MockEntityService) FindEntityByID(arg0 context.Context, arg1, arg2 string) (*model.Entity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindEntityByID", arg0, arg1, arg2)
	ret0, _ := ret[0].(*model.Entity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindEntityByID indicates an expected call of FindEntityByID.
func (mr *MockEntityServiceMockRecorder) FindEntityByID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindEntityByID", reflect.TypeOf((*MockEntityService)(nil).FindEntityByID), arg0, arg1, arg2)
}
